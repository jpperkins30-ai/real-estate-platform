{
  "info": {
    "_postman_id": "auth_collection_123456",
    "name": "Authentication",
    "description": "Authentication endpoints for the Real Estate Platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const response = pm.response.json();",
              "",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has token\", function () {",
              "    pm.expect(response).to.have.property('token');",
              "    pm.expect(response.token).to.be.a('string');",
              "    pm.expect(response.token.length).to.be.greaterThan(10);",
              "});",
              "",
              "pm.test(\"Response has user ID\", function () {",
              "    pm.expect(response).to.have.property('userId');",
              "    pm.expect(response.userId).to.be.a('string');",
              "});",
              "",
              "// Set environment variables for subsequent requests",
              "if (response.token) {",
              "    pm.environment.set(\"authToken\", response.token);",
              "    pm.environment.set(\"userId\", response.userId);",
              "    console.log(\"Auth token and user ID set in environment variables\");",
              "}",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"{{userPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "login"]
        },
        "description": "Authenticate a user and receive a JWT token"
      },
      "response": []
    },
    {
      "name": "Register",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const response = pm.response.json();",
              "",
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"User is created successfully\", function () {",
              "    pm.expect(response).to.have.property('userId');",
              "    pm.expect(response).to.have.property('email');",
              "    pm.expect(response.email).to.eql(pm.environment.get(\"userEmail\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"{{userPassword}}\",\n\t\"firstName\": \"{{userFirstName}}\",\n\t\"lastName\": \"{{userLastName}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new user"
      },
      "response": []
    },
    {
      "name": "Logout",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Clear environment variables",
              "pm.environment.set(\"authToken\", \"\");",
              "pm.environment.set(\"userId\", \"\");",
              "console.log(\"Auth token and user ID cleared from environment variables\");",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["auth", "logout"]
        },
        "description": "Logout and invalidate JWT token"
      },
      "response": []
    }
  ],
  "auth": {
    "type": "noauth"
  }
} 